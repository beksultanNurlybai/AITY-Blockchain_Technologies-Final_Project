<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Workplace</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <header>
        <nav class="navbar fixed-top navbar-expand-lg bg-body-secondary">
            <div class="container justify-content-between">
                <ul class="navbar-nav text-white">
                    <a class="navbar-brand" href="/">Decentralized Computational Resource Sharing Platform</a>
                    <li class="nav-item ms-5">
                        <a class="nav-link" href="/">Home</a>
                    </li>
                </ul>
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link" href="/workplace" id="user_id"><%= user.user_id %></a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/logout">Logout</a>
                    </li>
                </ul>
            </div>
        </nav>

        <!-- Registration Modal -->
        <div class="modal fade" id="registerModal">
            <div class="modal-dialog">
              <div class="modal-content">
                <div class="modal-header">
                  <h4 class="modal-title">Registration</h4>
                  <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <form id="registrationForm" onsubmit="connectAccount(event)">
                    <div class="modal-body">
                        <h6>Select role:</h6>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="role" id="provider" value="provider" required>
                            <label class="form-check-label" for="provider">Provider</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="role" id="renter" value="renter" required>
                            <label class="form-check-label" for="renter">Renter</label>
                        </div>
                    </div>
                    <div class="d-flex modal-footer justify-content-between">
                        <input id="rgbtn" type="submit" class="form-control text-bg-primary" value="Register" style="width: 80px;" data-bs-dismiss="modal">
                        <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Close</button>
                    </div>
                </form>
              </div>
            </div>
        </div>
    </header>
    <div class="container my-4 mt-5 pt-5">
        <% if (user.provider_id) { %>
            <% if (provider.is_active) { %>
                <div class="card p-4 shadow-sm">
                    <form id="uploadForm" action="/upload" method="POST" enctype="multipart/form-data">
                        <div class="mb-3">
                            <label for="pythonFile" class="form-label">Upload Python File</label>
                            <input type="file" class="form-control" name="pythonFile" id="pythonFile" accept=".py" required>
                        </div>
                        <button type="submit" class="btn btn-primary w-100">Upload and Run</button>
                    </form>
                </div>

                <div class="card mt-5 p-4 shadow-sm">
                    <h2 class="card-title">Output</h2>
                    <pre id="outputDisplay" class="p-3 bg-light text-dark rounded" style="min-height: 100px;">Waiting for file upload...</pre>
                </div>
                <div class="card mt-5 p-4 shadow-sm">
                    <h5>Processor name: <%= provider.resource.processor_name %></h5>
                    <h5>CPU count: <%= provider.resource.cpu_count %></h5>
                    <h5>RAM size: <%= provider.resource.ram_size %></h5>
                    <h5>Provider: <%= provider.user_id %></h5>
                </div>
                <div class="card mt-5 p-4 shadow-sm">
                    <h2 class="card-title">CPU and RAM Usage</h2>
                    <canvas id="usageChart" width="400" height="200"></canvas>
                </div>
                <script>
                    document.getElementById("uploadForm").addEventListener("submit", async function(event) {
                        event.preventDefault();
        
                        const fileInput = document.getElementById("pythonFile");
                        const outputDisplay = document.getElementById("outputDisplay");
        
                        if (!fileInput.files.length) {
                            outputDisplay.textContent = "Please select a Python file to upload.";
                            return;
                        }
        
                        const file = fileInput.files[0];
                        const reader = new FileReader();
        
                        reader.onload = async function() {
                            const fileContent = reader.result;
                            outputDisplay.textContent = "Running file... Please wait.";
                            try {
                                const response = await fetch("/upload", {
                                    method: "POST",
                                    headers: {
                                        "Content-Type": "application/json"
                                    },
                                    body: JSON.stringify({
                                        content: fileContent,
                                    })
                                });
        
                                if (response.ok) {
                                    const result = await response.json();
                                    outputDisplay.textContent = result.output || "No output received.";
                                } else {
                                    const error = await response.text();
                                    outputDisplay.textContent = `Error: ${error}`;
                                }
                            } catch (error) {
                                outputDisplay.textContent = `Failed to upload file: ${error.message}`;
                            }
                        };
                        reader.readAsText(file);
                    });
                    
                    const usageCtx = document.getElementById('usageChart').getContext('2d');
                    const cpuData = [];
                    const ramData = [];
                    const labels = [];
                    const usageChart = new Chart(usageCtx, {
                        type: 'line',
                        data: {
                            labels: labels,
                            datasets: [
                                {
                                    label: 'CPU Usage (%)',
                                    data: cpuData,
                                    borderColor: 'rgb(255, 99, 132)',
                                    backgroundColor: 'rgba(255, 99, 132, 0.2)',
                                },
                                {
                                    label: 'RAM Usage (%)',
                                    data: ramData,
                                    borderColor: 'rgb(54, 162, 235)',
                                    backgroundColor: 'rgba(54, 162, 235, 0.2)',
                                }
                            ]
                        },
                        options: {
                            scales: {
                                x: { title: { display: true, text: 'Time' } },
                                y: { title: { display: true, text: 'Usage (%)' }, min: 0, max: 100 }
                            }
                        }
                    });
                    
                    user_id = document.getElementById('user_id').innerHTML;
                    const ws = new WebSocket(`ws://localhost:3001?user_id=${user_id}`);
                
                    ws.onopen = () => {
                        console.log('Connected to server for real-time updates.');
                    };
                
                    ws.onmessage = (event) => {
                        const data = JSON.parse(event.data);
                        if (data.event === 'resource_data_update') {
                            const { cpu_usage, ram_usage } = data.content;

                            const timestamp = new Date().toLocaleTimeString();
                            labels.push(timestamp);
                            cpuData.push(cpu_usage);
                            ramData.push(ram_usage);
                
                            if (labels.length > 10) {
                                labels.shift();
                                cpuData.shift();
                                ramData.shift();
                            }
                
                            usageChart.update();
                        }
                    };
                
                    ws.onclose = () => {
                        ws.send(JSON.stringify({ event: "stop_resource_data" }));
                    };
                    window.addEventListener('beforeunload', () => {
                        if (ws.readyState === WebSocket.OPEN) {
                            ws.send(JSON.stringify({ event: "stop_resource_data" }));
                        }
                    });
                </script>
            <% } else { %>
                <div style="width: 100%; margin-top: 200px; text-align: center;">
                    <h2>Provider is disconnected.</h2>
                </div>
            <% } %>
        <% } else if (user.key) { %>
            <div class="card mt-5 p-4 shadow-sm">
                <h4>Your key: <%= user.key %></h4>
            </div>
            <% if (user.is_active) { %>
                <div class="card mt-5 p-4 shadow-sm">
                    <h5>Processor name: <%= user.resource.processor_name %></h5>
                    <h5>CPU count: <%= user.resource.cpu_count %></h5>
                    <h5>RAM size: <%= user.resource.ram_size %></h5>
                    <% if (renter) { %>
                        <h5>Renter: <%= renter.user_id %></h5>
                    <% } else { %>
                        <h5>Renter: nobody</h5>
                    <% } %>
                    <h5>price: <%= user.resource.price %> wei</h5>
                </div>
                <div class="card mt-5 p-4 shadow-sm">
                    <h5 class="mb-3">Set Price Per Month (in Wei):</h5>
                    <form id="registerForm">
                        <input type="hidden" id="account" value="<%= user.user_id %>">
                        <div class="input-group">
                            <button type="submit" class="btn btn-primary">Submit</button>
                            <input type="text" class="form-control" id="price" placeholder="Enter price in Wei" required>
                        </div>
                    </form>
                </div>
                <script>
                    document.getElementById("registerForm").addEventListener("submit", async function (e) {
                        e.preventDefault();

                        const price = document.getElementById("price").value;
                        const account = document.getElementById("account").value;
                
                        if (!price || !account) {
                            alert("Please enter both price and account.");
                            return;
                        }
                
                        const data = { price, account };
                
                        try {
                            console.log(price, account);
                            const response = await fetch("/register-provider", {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/json",
                                },
                                body: JSON.stringify(data),
                            });
                
                            const textResponse = await response.text();
                
                            if (response.ok) {
                                alert("Price successfully updated!");
                                window.location.href = "/workplace";
                            } else {
                                alert(`Registration failed: ${result.error}`);
                            }
                        } catch (error) {
                            console.error("Error during registration:", error);
                            alert("An error occurred. Please try again.");
                        }
                    });
                </script>                
            <% } else { %>
                <div style="width: 100%; margin-top: 170px; text-align: center;">
                    <h2>You didn't connect to app.</h2>
                </div>
            <% } %>
        <% } else { %>
            <div style="width: 100%; margin-top: 200px; text-align: center;">
                <h2>You are not connected to any resource.</h2>
            </div>
        <% } %>       
    </div>
</body>
</html>
